from collections.abc import Buffer

from ._basekey import BaseKey
from ._context import Context
from ._sign import SignKeyPair

class MasterKey(BaseKey):
    def __init__(self, key: str | bytes | MasterKey | BaseKey | Buffer | None = None): ...
    def __eq__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def derive_key_from_password(
        self, password: bytes | Buffer, ctx: bytes | str | Context | Buffer | None = None, opslimit: int = ...
    ) -> BaseKey: ...
    def derive_key_from_password_with_length(
        self, password: bytes | Buffer, length: int = ..., ctx: bytes | str | Context | Buffer | None = None, opslimit: int = ...
    ) -> bytes: ...
    def derive_subkey(self, subkey_id: int, ctx: bytes | str | Context | Buffer | None = None) -> BaseKey: ...
    def derive_subkey_with_length(self, subkey_id: int, length: int = ..., ctx: bytes | str | Context | Buffer | None = None) -> bytes: ...
    def derive_sign_keypair(self) -> SignKeyPair: ...
    def hash_password(self, password: bytes | Buffer, opslimit: int = ...) -> bytes: ...
    def verify_password(self, password: bytes | Buffer, stored: bytes | Buffer, opslimit: int = ...) -> bool: ...
