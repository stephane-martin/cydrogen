from collections.abc import Buffer
from os import PathLike
from typing import BinaryIO, Self

from ._context import Context

class SignPublicKey:
    def __init__(self, key: str | bytes | Self | Buffer): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def eq(self, other: SignPublicKey) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def verifier(self, ctx: str | bytes | Context | Buffer | None = None) -> "Verifier": ...
    def __buffer__(self, flags: int, /) -> memoryview: ...

class SignSecretKey:
    def __init__(self, key: str | bytes | Self | Buffer): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def eq(self, other: SignSecretKey) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def public_key(self) -> SignPublicKey: ...
    def check_public_key(self, other: SignPublicKey) -> bool: ...
    def signer(self, ctx: str | bytes | Context | Buffer | None = None) -> "Signer": ...
    def __buffer__(self, flags: int, /) -> memoryview: ...

class SignKeyPair:
    def __init__(self, kp: str | bytes | Self | SignSecretKey | Buffer): ...
    def __eq__(self, other: object) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def signer(self, ctx: str | bytes | Context | Buffer | None = None) -> "Signer": ...
    def verifier(self, ctx: str | bytes | Context | Buffer | None = None) -> "Verifier": ...
    def __buffer__(self, flags: int, /) -> memoryview: ...
    @classmethod
    def gen(cls) -> Self: ...

class BaseSigner:
    def __init__(self, *, ctx: str | bytes | Context | Buffer | None = None, data: bytes | Buffer | None = None): ...
    def update_from(self, fileobj: str | PathLike | BinaryIO, chunk_size=...): ...
    def update(self, data: bytes | Buffer): ...
    def write(self, data: bytes | Buffer) -> int: ...

class Signer(BaseSigner):
    def __init__(
        self, private_key: SignSecretKey, *, ctx: str | bytes | Context | Buffer | None = None, data: bytes | Buffer | None = None
    ): ...
    def sign(self) -> bytes: ...

class Verifier(BaseSigner):
    def __init__(
        self, public_key: SignPublicKey, *, ctx: str | bytes | Context | Buffer | None = None, data: bytes | Buffer | None = None
    ): ...
    def verify(self, signature: bytes | Buffer) -> None: ...

def sign_file(
    key: SignSecretKey, fileobj: str | PathLike | BinaryIO, ctx: str | bytes | Context | Buffer | None = None, chunk_size: int = ...
): ...
def verify_file(
    key: SignPublicKey,
    fileobj: str | PathLike | BinaryIO,
    signature: bytes | Buffer,
    ctx: str | bytes | Context | Buffer | None = None,
    chunk_size: int = ...,
) -> None: ...
