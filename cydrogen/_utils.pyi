from collections.abc import Buffer
from os import PathLike
from typing import BinaryIO, Literal, Protocol, type_check_only

def store64(dst: Buffer, src: int): ...
def store32(dst: Buffer, src: int): ...
def store16(dst: Buffer, src: int): ...
def load64(src: Buffer) -> int: ...
def load32(src: Buffer) -> int: ...
def load16(src: Buffer) -> int: ...
def have_mman() -> bool: ...
def little_endian() -> bool: ...
def big_endian() -> bool: ...
@type_check_only
class Reader(Protocol):
    def read(self, length: int = ...) -> bytes: ...

@type_check_only
class Writer(Protocol):
    def write(self, buf: Buffer) -> int: ...

class SafeReader:
    def __init__(self, fileobj: Reader): ...
    def readinto(self, buf: Buffer) -> int: ...
    def read(self, length: int = ...) -> bytes: ...

class SafeWriter:
    def __init__(self, fileobj: Writer): ...
    def write(self, buf: Buffer) -> int: ...

class TeeWriter:
    def __init__(self, w1: Writer, w2: Writer): ...
    def write(self, buf: Buffer) -> int: ...

class FileOpener:
    def __init__(self, fileobj_or_path: str | PathLike | BinaryIO, *, mode: Literal["rb", "wb", "ab"] = ...): ...
    def __enter__(self) -> BinaryIO: ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
