from collections.abc import Buffer
from os import PathLike
from typing import BinaryIO, Protocol, Self, type_check_only

from ._basekey import BaseKey
from ._context import Context
from ._masterkey import MasterKey

@type_check_only
class Writer(Protocol):
    def write(self, buf: Buffer) -> int: ...

class SecretBoxKey(BaseKey):
    def __init__(self, key: bytes | str | Self | BaseKey | Buffer): ...
    def __eq__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def secretbox(self, ctx: bytes | str | Context | Buffer | None = None) -> "SecretBox": ...
    @classmethod
    def from_password(
        cls,
        password: bytes | Buffer,
        *,
        master_key: bytes | str | Buffer | MasterKey | None = None,
        ctx: bytes | str | Context | Buffer | None = None,
        opslimit: int = ...,
    ) -> Self: ...

class EncryptedMessage:
    ciphertext: bytes
    msg_id: int

    def __init__(self, message: bytes | Buffer, msg_id: int): ...
    def __bytes__(self) -> bytes: ...
    def __eq__(self, other: object) -> bool: ...
    def writeto(self, fileobj) -> int: ...
    def decrypt(self, key, ctx=None, out=None) -> bytes: ...
    @classmethod
    def from_bytes(cls, framed: bytes | Buffer) -> Self: ...
    @classmethod
    def read_from(cls, fileobj, *, max_msg_size=None) -> Self: ...

class SecretBox:
    key: SecretBoxKey
    ctx: Context

    def __init__(self, key: bytes | str | SecretBoxKey | BaseKey | Buffer, *, ctx: bytes | str | Context | Buffer | None = None): ...
    def encrypt(self, plaintext: bytes | Buffer, msg_id: int = ..., out: Writer | None = None) -> bytes: ...
    def decrypt(self, ciphertext: bytes | Buffer | EncryptedMessage, msg_id: int = ..., out: Writer | None = None) -> bytes: ...
    def encrypt_file(self, src: str | PathLike | BinaryIO, dst: str | PathLike | BinaryIO, chunk_size: int = ...) -> int: ...
    def decrypt_file(self, src: str | PathLike | BinaryIO, out: str | PathLike | BinaryIO) -> int: ...
